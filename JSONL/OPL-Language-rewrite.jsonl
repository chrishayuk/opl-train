{"prompt": "How are keywords written in the OPL programming language?", "completion": "In the OPL programming language, keywords are typically written in UPPERCASE. For example, `PRINT \"PRINT should be written in capital letters\"`.", "classification": "Syntax"}
{"prompt": "How are local variables to a procedure declared in OPL?", "completion": "In OPL, variables local to the procedure are declared using the LOCAL keyword followed by the variable name. By default, variables are real numbers. For instance, `LOCAL pi\npi=3.14`.", "classification": "Variables & Data Types"}
{"prompt": "Is it possible to declare and assign variables in a single statement in OPL?", "completion": "Yes, in OPL, variables can be declared and assigned in one statement. An example is `LOCAL pi=3.14`.", "classification": "Variables & Data Types"}
{"prompt": "How can you declare a local integer variable in OPL?", "completion": "To declare a local variable as an integer in OPL, postfix the % symbol after the variable name. For instance, `LOCAL num%=10`.", "classification": "Variables & Data Types"}
{"prompt": "What data types are natively supported by OPL?", "completion": "OPL natively supports several data types including: 'Integer' variables which are whole numbers and are represented with a '%' sign after the variable name (e.g., counter%); 'Floating point' or 'real' variables which can hold decimal values like 2.5983; and 'String' variables which can store character sequences such as 'Fred B Smith', and are denoted with a '$' sign after the variable name (e.g., name$).", "classification": "Variables & Data Types"}
{"prompt": "Can a variable's data type be changed after it's been declared in OPL?", "completion": "No, once a variable's data type has been declared in OPL, it cannot be changed.", "classification": "Variables & Data Types"}
{"prompt": "How do you assign a value to an already declared variable in OPL?", "completion": "You can assign a value to a previously declared variable using the assignment operator =, like `variableName = value`.", "classification": "Variables & Data Types"}
{"prompt": "What is the default data type for a variable if not specified in OPL?", "completion": "By default, variables in OPL are considered to be of real number (float) data type.", "classification": "Variables & Data Types"}
{"prompt": "Which symbols are used for basic arithmetic operations in OPL?", "completion": "In OPL, the symbols for basic arithmetic operations are `+` for addition, `-` for subtraction, `/` for division, and `*` for multiplication.", "classification": "Arithmetic Operations"}
{"prompt": "How is the modulo operation handled in OPL?", "completion": "OPL doesn't have a modulo operator, so you'd need to calculate it using integer division.", "classification": "Arithmetic Operations"}
{"prompt": "How is string concatenation achieved in OPL?", "completion": "In OPL, string concatenation is performed using the , operator. An example would be: `PRINT \"hello \" , \"chris\"`.", "classification": "String Manipulation"}
{"prompt": "How do you declare a string variable with a specified length in OPL?", "completion": "In OPL, to declare a local variable as a string with a specified length, postfix the $ symbol after the variable name and include the length in parenthesis. For example: `LOCAL firstname$(10)\nfirstname$=\"Chris\"`.", "classification": "String Manipulation"}
{"prompt": "How does one use the PRINT statement in OPL to display output to the screen?", "completion": "In OPL, you use the PRINT statement followed by the content in double quotes. For instance, `PRINT \"Hello World\"`.", "classification": "Input/Output"}
{"prompt": "Why is the GET command important in OPL after a PRINT statement?", "completion": "The GET command in OPL stops the program until a user presses a key. If the PRINT statement isn't followed by a GET command, the message might be displayed only briefly, potentially being missed by the user.", "classification": "Input/Output"}
{"prompt": "How can users input values from the keyboard in OPL?", "completion": "Users can input values from the keyboard in OPL using the INPUT keyword. For instance: `INPUT name$`.", "classification": "Input/Output"}
{"prompt": "What comparison operators does OPL support?", "completion": "OPL supports several comparison operators: `=` for equals, `<` for less than, `>` for greater than, `>=` for greater than or equal to, `<=` for less than or equal to, and `<>` for not equal to.", "classification": "Comparison Operations"}
{"prompt": "Which bitwise operators are supported in OPL?", "completion": "OPL supports the following bitwise operators: AND, OR, and NOT.", "classification": "Bitwise Operations"}
{"prompt": "How can comments be represented in the OPL programming language?", "completion": "In OPL, comments are represented using the REM keyword. For instance: `REM This is an example of a comment`.", "classification": "Comments"}
{"prompt": "Where can comments be placed in a line in the OPL language?", "completion": "In OPL, comments can be placed anywhere in a line using the REM keyword. For instance: `PRINT \"hello world\" rem This is a comment`.", "classification": "Comments"}
{"prompt": "How are procedures declared in OPL?", "completion": "In OPL, procedures are declared using the keyword PROC followed by the procedure name, a colon, and the code block on the next line. The procedure block ends with the keyword ENDP.", "classification": "Procedures & Functions"}
{"prompt": "How do you call a procedure in OPL?", "completion": "To call a procedure in OPL, you use the procedure name followed by a colon. For instance, after defining a procedure named 'hello', you'd call it with `hello:`.", "classification": "Procedures & Functions"}
{"prompt": "How can you declare a procedure with parameters in OPL?", "completion": "In OPL, procedures with parameters are declared using the PROC keyword followed by the procedure name, a pair of parentheses enclosing the parameter list with type annotations, and a colon. For instance: `PROC display_number(a%):`.", "classification": "Procedures & Functions"}
{"prompt": "How can a value be returned from a procedure in OPL?", "completion": "To return a value from a procedure in OPL, utilize the RETURN keyword. For example, in a procedure that sums two numbers, you'd use `RETURN a+b`.", "classification": "Procedures & Functions"}
{"prompt": "What operators are available for conditional operations in OPL?", "completion": "OPL supports several conditional operators: `=` for equals, `<` for less than, `>` for greater than, `>=` for greater than or equal to, `<=` for less than or equal to, and `<>` for not equal to.", "classification": "Conditional Operations"}
