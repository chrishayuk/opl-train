{ "prompt": "in OPL, the PRINT statement is used to display output to the screen.  for example: PRINT \"Hello World\"", "completion": "PRINT \"I will be displayed to the screen\""  }
{ "prompt": "in the OPL programming language, keywords should be written in UPPERCASE, for example: PRINT \"PRINT should be written in captial letters\"", "completion": "PRINT \"PRINT is a keyword\""  }
{ "prompt": "in the OPL programming language, comments are represented by the REM keyword.  REM is short for remark. REM is implemented as single line comment, for example:\nREM This is an example of a comment", "completion": "REM This is another example of a comment"  }
{ "prompt": "in the OPL programming language, comments can be placed anywhere in a line using the rem keyword.  any text in the line after the rem will be ignored.  for example:\nPRINT \"hello world\" rem This is a comment", "completion": "PRINT \"I am not a comment\" REM I am a comment"  }
{ "prompt": "in the OPL programming language, comments are not multi-line, a new REM statement is required for each new line of a comment.  REM is short for remark. REM is implemented as single line comment, for example:\nREM This is the first line of a comment\nREM This is the second line of a comment", "completion": "REM Comment 1\nREM Comment 2\nREM comment 3"  }
{ "prompt": "in OPL, the GET command stops the program until a user presses a key.  This is useful for displaying input, where if the PRINT statement was not followed by a GET command then the message may only be displayed for a short amount of time meaning the user may not see it.  for example: PRINT \"Hello World\"\nGET", "completion": "PRINT \"I will be disappear if there is no GET\""  }
{ "prompt": "in OPL, string concatenation is performed using the , operator, for example: PRINT \n\"hello \" , \"chris\"", "completion": "PROC main:\n\tPRINT \"Hello \" , \"World\"\n\tGET\nENDP"  }
{ "prompt": "in OPL, variables local to the procedure are declared using the LOCAL keyword followed by the name of the variable.  by default variables are declared as real numbers (or floats).  = is the assignment operator in OPL. for example: LOCAL pi\npi=3.14", "completion": "PROC main:\n\tLOCAL pi\npi=3.14\n\nPRINT pi\n\tGET\nENDP"  }
{ "prompt": "in OPL, variables can be declared and assigned in a single statement.  = is the assignment operator in OPL, for example: LOCAL pi=3.14", "completion": "PROC main:\n\tLOCAL pi=3.14\n\nPRINT pi\n\tGET\nENDP"  }
{ "prompt": "in OPL, if you wish to declare a local variable as an integer you would postfix the % symbol after the variable name. for example: LOCAL num%=10", "completion": "PROC main:\n\tLOCAL num%=10\n\n\tPRINT num%\n\tGET\nENDP"  }
{ "prompt": "in OPL, if you wish to declare a local variable as a string you would postfix the $ symbol after the variable name and include the length of the stirng in parenthesis.  for example: LOCAL firstname$(10)\nfirstname$=\"Chris\"", "completion": "PROC main:\n\tLOCAL firstname$(10)=\"Chris\"\n\n\tPRINT \"Hello \" , firstname$\n\tGET\nENDP"  }
{ "prompt": "in OPL, users can input values from the keyboard using the INPUT keyword.  for example: INPUT name$", "completion": "PROC main:\n\tLOCAL name$(10)\nPRINT \"Enter your name?\"\nINPUT name$\nPRINT \"Hello \" + name$\nGET\nENDP"  }
{ "prompt": "in OPL, + is used for addition, - is used for subtraction, / is used for division, and * is used for multiplication. for example: LOCAL calculation%=((10+20-6)*3)/2", "completion": "PROC calculations:\n\tLOCAL num1% = 10\n\tLOCAL num2% = 5\n\n\tPRINT \"Addition:\", num1% + num2%\n\tPRINT \"Subtraction:\", num1% - num2%\n\tPRINT \"Multiplication:\", num1% * num2%\n\tPRINT \"Division:\", num1% / num2%\n\n\tGET\nENDP"  }
{ "prompt": "OPL supports the following comparison operators, = is equals, < less than, > greater than, >= greater than or equal to, <= less than or equal to, <> not equal to", "completion": "PROC main:\n\tLOCAL a, b\n\n\ta = 10\n\tb = 5\n\n\tIF a > b THEN\n\t\tPRINT \"a > b\"\n\tENDIF\n\n\tIF a < b THEN\n\t\tPRINT \"a < b\"\n\tENDIF\n\n\tIF a >= b THEN\n\t\tPRINT \"a >= b\"\n\tENDIF\n\n\tIF a <= b THEN\n\t\tPRINT \"a <= b\"\n\tENDIF\n\n\tIF a = b THEN\n\t\tPRINT \"a = b\"\n\tENDIF\n\n\tIF a <> b THEN\n\t\tPRINT \"a <> b\"\n\tENDIF\n\n\tGET\nENDP" }
{ "prompt": "OPL supports the following bitwise operators: AND, OR, NOT", "completion": "PROC main:\n\tLOCAL a, b\n\n\ta = 10\n\tb = 5\n\n\tIF a > b THEN\n\t\tPRINT \"a > b\"\n\tENDIF\n\n\tIF a < b THEN\n\t\tPRINT \"a < b\"\n\tENDIF\n\n\tIF a >= b THEN\n\t\tPRINT \"a >= b\"\n\tENDIF\n\n\tIF a <= b THEN\n\t\tPRINT \"a <= b\"\n\tENDIF\n\n\tIF a = b THEN\n\t\tPRINT \"a = b\"\n\tENDIF\n\n\tIF a <> b THEN\n\t\tPRINT \"a <> b\"\n\tENDIF\n\n\tGET\nENDP" }
{ "prompt": "There is no modulo operator in OPL, so this would need to be calculated using integer division","completion":"PROC main:\n\tLOCAL dividend%, divisor%, remainder%\n\n\tdividend% = 17\n\tdivisor% = 5\n\n\tremainder% = dividend% % divisor%\n\n\tPRINT \"Dividend:\", dividend%\n\tPRINT \"Divisor:\", divisor%\n\tPRINT \"Remainder:\", remainder%\n\n\tGET\nENDP" }
{ "prompt": "in OPL, procedures are declared as PROC followed by the name of procedure, and a colon, indicating the code block will follow on the next line. The Procedure block ends with the keyword ENDP  For example PROC hello:\n\t PRINT\"Hello World\"\nENDP", "completion": "The following is an example of a procedure in OPL: PROC hello:\n\tPRINT\"Hello World\"\nENDP" }
{ "prompt": "to call a procedure in OPL, you would call the procedure name followed by a colon.  for example: PROC hello:\n\t PRINT\"Hello\" \nworld:\n\nENDP\n\nPROC world:\n\t PRINT\"World\"\nENDP", "completion": "The following is an example of a procedure in OPL: PROC hello:\n\t PRINT\"Hello\"\nENDP" }
{ "prompt": "in OPL, procedures with parameters are declared as PROC followed by the name of procedure, a pair of parenthesis with a list of parameters (including type annotation) enclosed followed by a colon, indicating the code block will follow on the next line. The Procedure block ends with the keyword ENDP  For example PROC display_number(a%):\n\tPRINT a% \nENDP", "completion": "The following is an example of a procedure where a name is passed to the greet procedure, and the procedure greets the person: PROC main:\n\tgreet:(\"Bob\")\nENDP\n\nPROC greet(name$):\n\tPRINT\"Hello \", name$\nENDP" }
{ "prompt": "to call a procedure in OPL with parameters, you would call the procedure name followed by a colon followed by the parameter list enclosed in a pair of parenthesis.  for example the following example would call the sum procedure passing integers 10 and 20: sum:(10,20)", "completion": "The following is an example of a procedure where a name is passed to the greet procedure, and the procedure greets the person: PROC main:\n\t greet:(\"Bob\")\nENDP\n\nPROC greet(name$):\n\tPRINT\"Hello \", name$\nENDP" }
{ "prompt": "to return a value from a procedure in OPL, you would use the RETURN keyword.  for example: PROC sum:\n\tRETURN a+b\nENDP", "completion": "The following is an example of a procedure that sums two numbers: PROC main:\n\tPRINT sum:(10,20)\nENDP\n\nPROC sum(a%,b%):\n\tRETURN a+b\nENDP" }
